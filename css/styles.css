/* no flex zone */
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Perform a value into a percentage value.
 * @param {number} $value - The value which should be converted.
 * @returns {number} $value - The percentage.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column-width().
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-column-gutter().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Alias for j-span().
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-shift().
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * Alias for j-unshift().
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 * Aliases for j-edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Alias for j-center().
 */
/**
 * Uncenter an element.
 */
/**
 * Alias for j-uncenter().
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Alias for j-stack().
 */
/**
 * Unstack an element.
 */
/**
 * Alias for j-unstack().
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Alias for j-align().
 */
/**
 * Apply a clearfix to an element.
 */
/**
 * Alias for j-cf().
 */
.red {
  color: #CC4444; }

.blue {
  color: #4444CC; }

@keyframes glitch {
  0% {
    text-shadow: 3px 1px rgba(255, 0, 0, 0.6), -3px -1px rgba(0, 255, 255, 0.6); }
  10% {
    text-shadow: 1px 1px rgba(255, 0, 0, 0.6), -5px -1px rgba(0, 255, 255, 0.6); }
  30% {
    text-shadow: 0px 0px rgba(255, 0, 0, 0.6), 0px 0px rgba(0, 255, 255, 0.6); }
  40% {
    text-shadow: 3px 1px rgba(255, 0, 0, 0.6), -3px -1px rgba(0, 255, 255, 0.6); }
  50% {
    text-shadow: 1px 1px rgba(255, 0, 0, 0.6), -5px -1px rgba(0, 255, 255, 0.6); }
  65% {
    text-shadow: 7px 2px rgba(255, 0, 0, 0.6), 1px 0px rgba(0, 255, 255, 0.6); }
  68% {
    text-shadow: 6px 4px rgba(255, 0, 0, 0.6), 0px 2px rgba(0, 255, 255, 0.6); }
  75% {
    text-shadow: 2px -2px rgba(255, 0, 0, 0.6), -4px -4px rgba(0, 255, 255, 0.6); }
  100% {
    text-shadow: 3px 1px rgba(255, 0, 0, 0.6), -3px -1px rgba(0, 255, 255, 0.6); } }

.preloader {
  background-color: #000;
  width: 100vw;
  height: 100vh;
  margin: 0;
  z-index: 999; }
  .preloader .loading-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    width: 100%;
    color: #fff;
    font-size: 13px;
    font-family: sans-serif;
    letter-spacing: 3px;
    line-height: 10px;
    height: 10px;
    animation: fade 1s ease 0s infinite;
    z-index: 1000; }

@keyframes fade {
  0% {
    opacity: 1; }
  50% {
    opacity: 0; }
  100% {
    opacity: 1; } }

html, body {
  margin: 0;
  padding: 0;
  font-size: 62.5%;
  overflow-x: hidden;
  font-family: 'Open Sans';
  font-weight: 300; }

h1, h2, h3, h4, h5, h6 {
  padding: 0;
  margin: 0; }

h1 {
  font-size: 11rem;
  color: #fff; }

h2 {
  font-size: 4rem;
  font-weight: 300;
  text-align: center; }

h3 {
  margin: 1.2rem 0 0.6rem 0;
  font-size: 3rem;
  font-weight: 300; }

h4 {
  font-size: 1.6rem;
  font-family: 'Lora';
  font-style: italic;
  font-weight: 400;
  letter-spacing: .5px; }

p {
  font-size: 1.6rem; }

a {
  font-size: 1.4rem;
  text-decoration: none; }

.button {
  width: 147.5px;
  display: inline-block;
  padding: 10px 15px;
  margin: 2px;
  color: #000;
  background-color: white;
  text-transform: uppercase;
  font-weight: 400;
  font-size: 1.8rem;
  transition: all 0.2s ease-in-out; }
  .button:hover {
    background-color: rgba(255, 255, 255, 0);
    color: #fff; }

.arrow {
  background: none;
  outline: none;
  border: none; }
  .arrow::before, .arrow::after {
    position: relative;
    display: block;
    content: "";
    margin: 0 auto;
    height: 1px;
    width: 20px;
    transition: background-color 0.1s;
    background-color: #fff; }
  .arrow::before {
    margin-top: 40px;
    transform: rotate(45deg);
    left: -14px; }
  .arrow::after {
    transform: rotate(-45deg);
    top: -1px; }
  .arrow.black::before, .arrow.black::after {
    background-color: #000; }

nav {
  position: fixed;
  z-index: 2;
  bottom: 0;
  width: 100vw;
  transform: translate(0, 0);
  text-align: center;
  transition: transform 0.6s; }
  nav.closed {
    transform: translate(0, calc(100% - 60px)); }
    nav.closed .arrow {
      transform: translate(0, 0);
      opacity: 1; }
  nav span {
    display: block;
    height: 60px; }
  nav .arrow {
    transition: opacity 0.6s, transform 0.6s;
    opacity: 0;
    transform: translate(0, -40px); }
  nav ul {
    list-style: none;
    padding: 0;
    margin: 0; }
  nav li {
    background-color: #fff;
    width: 100%;
    height: 50px;
    line-height: 50px;
    transition: all 0.2s;
    cursor: pointer; }
    nav li.hidden {
      display: none; }
    nav li:hover {
      background-color: #eee; }
  nav a {
    display: block;
    width: 100%;
    height: 100%;
    font-size: 1.5rem;
    font-weight: 300;
    letter-spacing: 1px;
    text-transform: uppercase; }

section.logo {
  background-color: #000;
  height: 100vh; }
  section.logo img {
    position: absolute;
    top: 50%;
    transform: translate(0, -50%);
    width: 100%; }

section.philosophy {
  background-color: #f3f3f3; }
  section.philosophy .about-us {
    padding: 120px 20px;
    text-align: center;
    background: -webkit-linear-gradient(#000, #131320);
    /* For Safari 5.1 to 6.0 */
    background: -o-linear-gradient(#000, #131320);
    /* For Opera 11.1 to 12.0 */
    background: -moz-linear-gradient(#000, #131320);
    /* For Firefox 3.6 to 15 */
    background: linear-gradient(#000, #131320);
    /* Standard syntax */
    color: #fafafa; }
    section.philosophy .about-us p:first-of-type {
      margin: 4rem 0; }
  @media only screen and (max-width: 650px) {
    section.philosophy .about-us {
      padding: 120px 40px; }
    section.philosophy br {
      display: none; } }
  section.philosophy .keywords {
    *zoom: 1;
    width: auto;
    max-width: 1200px;
    float: none;
    display: block;
    margin-right: auto;
    margin-left: auto;
    padding-left: 0;
    padding-right: 0;
    padding: 100px 0;
    color: #111; }
    section.philosophy .keywords:before, section.philosophy .keywords:after {
      content: '';
      display: table; }
    section.philosophy .keywords:after {
      clear: both; }
  section.philosophy .process {
    float: left;
    clear: none;
    width: 31.33333%;
    margin-left: 0;
    margin-right: 3%;
    text-align: center; }
    section.philosophy .process:nth-of-type(3n) {
      margin-right: 0;
      float: right; }
    section.philosophy .process:nth-of-type(3n + 1) {
      clear: both; }
    section.philosophy .process i {
      text-shadow: none;
      font-size: 6rem; }
    section.philosophy .process:hover i {
      -webkit-animation: glitch 0.35s;
      /* Safari 4+ */
      -moz-animation: glitch 0.35s;
      /* Fx 5+ */
      -o-animation: glitch 0.35s;
      /* Opera 12+ */
      animation: glitch 0.35s;
      /* IE 10+, Fx 29+ */ }
    section.philosophy .process p {
      margin: 0 auto;
      padding: 0 30px; }
  @media only screen and (max-width: 700px) {
    section.philosophy .process {
      display: block;
      clear: both;
      float: none;
      width: 100%;
      margin-left: auto;
      margin-right: auto;
      margin-bottom: 60px; }
      section.philosophy .process:first-child {
        margin-left: auto; }
      section.philosophy .process:last-child {
        margin-right: auto; }
      section.philosophy .process p {
        max-width: 350px; } }
  section.philosophy .desktop::after {
    content: "\f108";
    position: absolute;
    display: none;
    left: -25px; }
  section.philosophy .code::after {
    content: "\f121";
    position: absolute;
    display: none;
    left: -25px; }
  section.philosophy .rocket::after {
    content: "\f135";
    position: absolute;
    display: none;
    left: -25px; }

section.portfolio {
  border-top: 1px solid #ccc;
  background-color: #e3e3e3;
  text-align: center; }
  section.portfolio header {
    padding: 40px 0; }
  section.portfolio h2 {
    text-transform: uppercase; }
  section.portfolio .grid {
    *zoom: 1;
    margin: 0;
    padding: 0;
    list-style: none; }
    section.portfolio .grid:before, section.portfolio .grid:after {
      content: '';
      display: table; }
    section.portfolio .grid:after {
      clear: both; }
    section.portfolio .grid li {
      float: left;
      clear: none;
      width: 33.33333%;
      margin-left: 0;
      margin-right: 0; }
      @media only screen and (max-width: 1100px) {
        section.portfolio .grid li {
          float: left;
          clear: none;
          width: 50%;
          margin-left: 0;
          margin-right: 0; } }
      @media only screen and (max-width: 800px) {
        section.portfolio .grid li {
          display: block;
          clear: both;
          float: none;
          width: 100%;
          margin-left: auto;
          margin-right: auto; }
          section.portfolio .grid li:first-child {
            margin-left: auto; }
          section.portfolio .grid li:last-child {
            margin-right: auto; } }
    section.portfolio .grid img {
      width: 100%; }

section.crew {
  text-align: center; }
  section.crew h2 {
    margin-bottom: 80px;
    text-transform: uppercase; }
  section.crew h3 {
    text-transform: uppercase;
    margin: 0;
    margin-left: -2px; }
  section.crew .content {
    *zoom: 1;
    width: auto;
    max-width: 1200px;
    float: none;
    display: block;
    margin-right: auto;
    margin-left: auto;
    padding-left: 0;
    padding-right: 0;
    padding: 80px 0 120px; }
    section.crew .content:before, section.crew .content:after {
      content: '';
      display: table; }
    section.crew .content:after {
      clear: both; }
  section.crew article {
    float: left;
    clear: none;
    width: 45%;
    margin-left: 0;
    margin-right: 10%; }
    section.crew article:nth-of-type(2n) {
      margin-right: 0;
      float: right; }
    section.crew article:nth-of-type(2n + 1) {
      clear: both; }
    section.crew article > div {
      text-align: left;
      display: inline-block;
      width: 300px; }
    section.crew article span {
      color: #666; }
  section.crew img {
    margin: -100px 20px 0 0;
    width: 175px;
    border-radius: 50%; }
  section.crew .noah h3, section.crew .noah a {
    color: #4444CC; }
  section.crew .lawrence h3, section.crew .lawrence a {
    color: #CC4444; }
  section.crew .button {
    margin: 80px auto 0; }
  @media only screen and (max-width: 1150px) {
    section.crew .content {
      width: auto;
      max-width: 1000px;
      float: none;
      display: block;
      margin-right: auto;
      margin-left: auto;
      padding-left: 0;
      padding-right: 0; }
    section.crew img {
      margin: 0px auto 20px; }
    section.crew article > div {
      text-align: center;
      display: block;
      width: 100%; } }
  @media only screen and (max-width: 700px) {
    section.crew article {
      display: block;
      clear: both;
      float: none;
      width: 100%;
      margin-left: auto;
      margin-right: auto;
      margin-bottom: 100px; }
      section.crew article:first-child {
        margin-left: auto; }
      section.crew article:last-child {
        margin-right: auto; } }

footer.contact {
  position: relative;
  background-color: #000;
  padding: 130px 0;
  color: #000;
  text-align: center; }
  footer.contact div {
    color: #bbb;
    margin-top: 50px; }

figure {
  margin: 0;
  position: relative;
  min-width: 320px;
  max-height: 360px;
  overflow: hidden;
  background: #3085a3;
  text-align: center;
  cursor: pointer;
  /* Anchor will cover the whole item by default */ }
  figure img {
    position: relative;
    display: block;
    min-height: 100%;
    max-width: 100%;
    opacity: 0.8; }
  figure figcaption {
    color: #000;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden; }
  figure figcaption::before,
  figure figcaption::after {
    pointer-events: none; }
  figure figcaption,
  figure figcaption > a {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; }
  figure figcaption > a {
    z-index: 1;
    text-indent: 200%;
    white-space: nowrap;
    font-size: 0;
    opacity: 0; }
  figure h5 {
    word-spacing: -0.15em;
    font-size: 4rem;
    font-weight: 300;
    margin: 0;
    text-transform: uppercase; }
  figure p {
    letter-spacing: 1px;
    margin: 0;
    padding: 0 20px;
    text-align: center;
    box-sizing: border-box;
    width: 100%; }

.effect-sadie figcaption::before {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, white 75%);
  content: '';
  opacity: 0;
  transform: translate3d(0, 50%, 0); }

.effect-sadie h5 {
  position: absolute;
  top: 45%;
  left: 0;
  width: 100%;
  opacity: 0;
  transition: transform 0.35s, color 0.35s, opacity 0.35s;
  transform: translate3d(0, -50%, 0); }

.effect-sadie figcaption::before, .effect-sadie p {
  transition: opacity 0.35s, transform 0.35s; }

.effect-sadie p {
  position: absolute;
  bottom: 0;
  left: 0;
  padding-bottom: 3rem;
  opacity: 0;
  transform: translate3d(0, 10px, 0); }

.effect-sadie:hover h5 {
  opacity: 1;
  transform: translate3d(0, -50%, 0) translate3d(0, -10px, 0); }

.effect-sadie:hover figcaption::before,
.effect-sadie:hover p {
  opacity: 1;
  transform: translate3d(0, 0, 0); }

@media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
  nav {
    display: none; } }
